/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package navloganalyzer.windows;

import java.awt.Component;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.function.Predicate;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import navloganalyzer.AppConstants;
import navloganalyzer.datepicker.DatePickerUtils;
import navloganalyzer.models.StudentAttendanceItem;
import navloganalyzer.utils.MyStringUtils;
import org.jdatepicker.impl.JDatePickerImpl;
import sun.util.calendar.CalendarSystem;

/**
 *
 * @author DanijelSokac
 */
public class DataTablePanel extends javax.swing.JPanel {

    /**
     * Creates new form DataTablePanel
     */
    public DataTablePanel(Component parent) {
        this.parent = parent;
        initComponents();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        analysisTable = new javax.swing.JTable();
        tableOptionsPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cbxStudents = new javax.swing.JComboBox<>();
        datePickerPanel = new javax.swing.JPanel();
        btnTimeFilter = new javax.swing.JButton();
        btnClearTimeFilters = new javax.swing.JButton();
        btnClearAllFilters = new javax.swing.JButton();
        btnAnalysis = new javax.swing.JButton();

        analysisTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Student", "Vrijeme prijave", "Vrijeme odjave", "Trajanje"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(analysisTable);
        analysisTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        tableOptionsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Mogućnosti"));
        tableOptionsPanel.setMaximumSize(new java.awt.Dimension(12, 115));
        tableOptionsPanel.setMinimumSize(new java.awt.Dimension(10, 100));

        jLabel1.setText("Student:");
        jLabel1.setToolTipText("");
        jLabel1.setName("lUsername"); // NOI18N

        cbxStudents.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        datePickerPanel.setLayout(new java.awt.GridBagLayout());

        btnTimeFilter.setText("Filtriraj");

        btnClearTimeFilters.setText("Očisti vremensko ograničenje");

        btnClearAllFilters.setText("Očisti sve filtere");

        btnAnalysis.setText("Analiziraj");

        javax.swing.GroupLayout tableOptionsPanelLayout = new javax.swing.GroupLayout(tableOptionsPanel);
        tableOptionsPanel.setLayout(tableOptionsPanelLayout);
        tableOptionsPanelLayout.setHorizontalGroup(
            tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableOptionsPanelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(tableOptionsPanelLayout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(datePickerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(tableOptionsPanelLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbxStudents, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tableOptionsPanelLayout.createSequentialGroup()
                        .addComponent(btnClearAllFilters)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAnalysis)))
                .addGap(18, 18, 18)
                .addComponent(btnTimeFilter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClearTimeFilters)
                .addContainerGap(571, Short.MAX_VALUE))
        );
        tableOptionsPanelLayout.setVerticalGroup(
            tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tableOptionsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnTimeFilter)
                        .addComponent(btnClearTimeFilters))
                    .addGroup(tableOptionsPanelLayout.createSequentialGroup()
                        .addGroup(tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(cbxStudents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(datePickerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addGroup(tableOptionsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClearAllFilters)
                    .addComponent(btnAnalysis))
                .addContainerGap())
        );

        jLabel1.getAccessibleContext().setAccessibleName("Student");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tableOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1044, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tableOptionsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 248, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(107, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable analysisTable;
    private javax.swing.JButton btnAnalysis;
    private javax.swing.JButton btnClearAllFilters;
    private javax.swing.JButton btnClearTimeFilters;
    private javax.swing.JButton btnTimeFilter;
    private javax.swing.JComboBox<String> cbxStudents;
    private javax.swing.JPanel datePickerPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel tableOptionsPanel;
    // End of variables declaration//GEN-END:variables
    private Component object = this;
    private int width = -1;
    private int height = -1;
    private List<StudentAttendanceItem> originalData = new ArrayList<>();
    private List<StudentAttendanceItem> data = new ArrayList<>();
    private Date dateTimeFrom = null;
    private Date dateTimeTo = null;
    private Component parent = null;
    private JDatePickerImpl datePickerFrom = null;
    private JDatePickerImpl datePickerTo = null;
    private String username = null;
    private List<String> studentList;

    public void populateTable(List<StudentAttendanceItem> data) {
        populateTable(data, false);
    }
    
    public void populateTable(List<StudentAttendanceItem> passedData, boolean isFiltering) {
        if(isFiltering) {
            this.data = passedData;
        } else {
            this.originalData = passedData;
        }
        DefaultTableModel tModel = (DefaultTableModel) analysisTable.getModel();
        tModel.setRowCount(0);
        for(StudentAttendanceItem item : passedData) {
            tModel.addRow(item.getRow());
        }
        validate();
        
        if(!isFiltering) {
            studentList = extractStudentsForCombobox(passedData);
            MyStringUtils.sortListItems(studentList);
            setupCombobox(studentList);
            setupDatePicker();
            btnTimeFilter.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    filterByTimeConstraint();
                }
            });
            
            btnClearTimeFilters.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    resetDatePickers();
                    data = originalData;
                    filterData();
                }
            });
            
            btnClearAllFilters.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    cbxStudents.setSelectedIndex(0);
                    resetDatePickers();
                    populateTable(originalData, true);
                }
            });
            
            btnAnalysis.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    List<String> options = new ArrayList<>();
                    options.add("Odaberi...");
                    options.addAll(studentList);
                    
                    String s = (String)JOptionPane.showInputDialog(
                                        parent,
                                        "Odaberi studenta/studenticu za analizu:\n",
                                        "Odaberi studenta za analizu",
                                        JOptionPane.PLAIN_MESSAGE,
                                        null,
                                        options.toArray(),
                                        "Odaberi...");

                    //If a string was returned, say so.
                    if ((s != null) && (s.length() > 0)) {
                        System.out.println(".actionPerformed() dialog win =>> " + s);
                    }
                }
            });
        }
    }
    
    private List<String> extractStudentsForCombobox(List<StudentAttendanceItem> data) {
        List<String> studentList = new ArrayList<>(); 
        for(StudentAttendanceItem item : data) {
            if(!studentList.contains(item.getUsername())) {
                studentList.add(item.getUsername());
            }
        }
        return studentList;
    }
    
    private void setupCombobox(List<String> studentList) {
        cbxStudents.removeAllItems();
        cbxStudents.addItem("Odaberi...");
        for(String item : studentList) {
            cbxStudents.addItem(item);
        }
        
        cbxStudents.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String selectedValue = (String)((JComboBox)e.getSource()).getSelectedItem();
                System.out.println(".actionPerformed() => " + selectedValue);
                data = originalData;
                username = cbxStudents.getSelectedIndex() != 0 ? selectedValue : null;
                if(cbxStudents.getSelectedIndex() != 0) {
                    filterData();
                } else {
                    populateTable(originalData, true);
                }
                if(dateTimeTo != null || dateTimeFrom != null) {
                    filterByTimeConstraint();
                }
            }
        });
    }
    
    private void filterData() {
        Predicate<StudentAttendanceItem> predicate = new Predicate<StudentAttendanceItem>() {
            @Override
            public boolean test(StudentAttendanceItem t) {
               return t.getUsername().equals(username);
            }
        };
        this.data = this.data.stream().filter(predicate).collect(Collectors.toList());
        populateTable(data, true);
    }
    
    private void setupDatePicker() {
        JLabel firstLabel = new JLabel("Vremenski period(od-do):   ");
        datePickerPanel.add(firstLabel);
        DatePickerUtils.initializeDatePicker(datePickerPanel);
        JLabel secondLabel = new JLabel("  -  ");
        datePickerPanel.add(secondLabel);
        DatePickerUtils.initializeDatePicker(datePickerPanel);

        datePickerFrom = (JDatePickerImpl)datePickerPanel.getComponent(1);
        datePickerTo = (JDatePickerImpl)datePickerPanel.getComponent(3);
        datePickerFrom.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
               String value = datePickerFrom.getJFormattedTextField().getText();
                System.out.println(".actionPerformed() => dateFrom = " + value);
                dateTimeFrom = (Date)datePickerFrom.getModel().getValue();
                Calendar cal = Calendar.getInstance();
                cal.setTime(dateTimeFrom);
                cal.set(Calendar.HOUR_OF_DAY, 0);
                cal.set(Calendar.MINUTE, 0);
                cal.set(Calendar.SECOND, 0);
                dateTimeFrom = cal.getTime();
                System.out.println(".actionPerformed() => dateFrom = " + dateTimeFrom);
            }
        });
        datePickerTo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String value = datePickerTo.getJFormattedTextField().getText();
                System.out.println(".actionPerformed() => dateTo = " + value);
                dateTimeTo = (Date)datePickerTo.getModel().getValue();
                Calendar cal = Calendar.getInstance();
                cal.setTime(dateTimeTo);
                cal.set(Calendar.HOUR_OF_DAY, 23);
                cal.set(Calendar.MINUTE, 59);
                cal.set(Calendar.SECOND, 59);
                dateTimeTo = cal.getTime();
                System.out.println(".actionPerformed() => dateTo = " + dateTimeTo);
                if(dateTimeFrom != null && dateTimeTo.before(dateTimeFrom)) {
                    JOptionPane.showMessageDialog(parent,
                        "Završni datum ne može biti prije početnog datuma!",
                        "Upozorenje",
                        JOptionPane.WARNING_MESSAGE);
                    resetDatePickers();
                }
            }
        });
    }
    
    private void resetDatePickers() {
        datePickerTo.getJFormattedTextField().setText("");
        datePickerTo.getModel().setSelected(false);
        datePickerFrom.getJFormattedTextField().setText("");
        datePickerFrom.getModel().setSelected(false);
        dateTimeFrom = null;
        dateTimeTo = null;
    }
    
    private void filterByTimeConstraint() {
        Predicate<StudentAttendanceItem> predicate = new Predicate<StudentAttendanceItem>() {
            @Override
            public boolean test(StudentAttendanceItem t) {
               return (t.getLogOn() != null && dateTimeFrom.before(t.getLogOn())) && 
                       (t.getLogOff() != null && dateTimeTo.after(t.getLogOff()));
            }
        };
        this.data = this.data.stream().filter(predicate).collect(Collectors.toList());
        populateTable(data, true);
    }
}
