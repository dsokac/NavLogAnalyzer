/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package navloganalyzer.windows;

import java.awt.BorderLayout;
import java.io.File;
import java.nio.charset.StandardCharsets;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import navloganalyzer.listeners.CleanFileListener;
import navloganalyzer.listeners.FilesUploadListener;
import navloganalyzer.tasks.CleanXmlTask;
import navloganalyzer.tasks.FileUploadTask;
import navloganalyzer.utils.WindowUtils;

/**
 *
 * @author DanijelSokac
 */
public class MainWin extends javax.swing.JFrame implements FilesUploadListener, CleanFileListener{

    /**
     * Creates new form MainWin
     */
    public MainWin() {
        initComponents();
        this.noDataPanel = new NoDataPanel();
        this.centerPanel.add(noDataPanel);
        this.centerPanel.validate();
        CleanXmlTask cleanTask = new CleanXmlTask(StandardCharsets.UTF_8, this);
        cleanTask.execute();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        mainPanel = new javax.swing.JPanel();
        centerPanel = new javax.swing.JPanel();
        mainWinMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        uploadFilesItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout centerPanelLayout = new javax.swing.GroupLayout(centerPanel);
        centerPanel.setLayout(centerPanelLayout);
        centerPanelLayout.setHorizontalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 599, Short.MAX_VALUE)
        );
        centerPanelLayout.setVerticalGroup(
            centerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 173, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addComponent(centerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(131, Short.MAX_VALUE))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap(153, Short.MAX_VALUE)
                .addComponent(centerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(144, Short.MAX_VALUE))
        );

        fileMenu.setText("File");

        uploadFilesItem.setMnemonic('U');
        uploadFilesItem.setText("Upload files");
        uploadFilesItem.setToolTipText("Upload files for the analysis.");
        uploadFilesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFilesItemActionPerformed(evt);
            }
        });
        fileMenu.add(uploadFilesItem);

        mainWinMenuBar.add(fileMenu);

        setJMenuBar(mainWinMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void uploadFilesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFilesItemActionPerformed
        File[] chosen = WindowUtils.fetchChosenFiles(this);
        if(chosen != null) {
            FileUploadTask task = new FileUploadTask(chosen, (FilesUploadListener)this);
            task.execute();
        }
    }//GEN-LAST:event_uploadFilesItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel centerPanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar mainWinMenuBar;
    private javax.swing.JMenuItem uploadFilesItem;
    // End of variables declaration//GEN-END:variables
    private ProgressBarPanel progressBarPanel;
    private NoDataPanel noDataPanel;
    
    
    @Override
    public void onUploadStarted() {
        System.out.println("navloganalyzer.windows.MainWin.onUploadStarted()");
        this.progressBarPanel = new ProgressBarPanel();
        JLabel currentAction = this.progressBarPanel.getCurrentActionLabel();
        currentAction.setText("Uploading files...");     
        this.noDataPanel.setVisible(false);
        this.centerPanel.add(this.progressBarPanel, BorderLayout.CENTER);
        this.centerPanel.setSize(this.progressBarPanel.getSize());
        this.centerPanel.validate();
    }

    @Override
    public void onUploadFinished() {
        System.out.println("navloganalyzer.windows.MainWin.onUploadFinished()");
        this.progressBarPanel.setVisible(false);
        this.centerPanel.validate();
        CleanXmlTask cleanTask = new CleanXmlTask(StandardCharsets.UTF_8, this);
        cleanTask.execute();
    }

    @Override
    public void onProgressStatusChanged(int progress) {
        System.out.println("navloganalyzer.windows.MainWin.onProgressStatusChanged()");
         JProgressBar progressBar = this.progressBarPanel.getProgressBar();
         System.out.println("WIN Progress = " + progress);
         progressBar.setValue(progress);
         this.progressBarPanel.validate();
    }

    @Override
    public void onCleanStarted() {
        System.out.println("navloganalyzer.windows.MainWin.onCleanStarted()");
        this.progressBarPanel = new ProgressBarPanel();
        JLabel currentAction = this.progressBarPanel.getCurrentActionLabel();
        currentAction.setText("Cleaning files...");     
        this.noDataPanel.setVisible(false);
        this.centerPanel.add(this.progressBarPanel, BorderLayout.CENTER);
        this.centerPanel.setSize(this.progressBarPanel.getSize());
        this.centerPanel.validate();
    }

    @Override
    public void onCleanFinished() {
        System.out.println("navloganalyzer.windows.MainWin.onCleanFinished()");
        this.progressBarPanel.setVisible(false);
        this.centerPanel.validate();
    }
}
